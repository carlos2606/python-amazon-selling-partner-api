# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CatalogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_catalog_item(self, , , **kwargs):  # noqa: E501
        """get_catalog_item  # noqa: E501

        Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog_item(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for the item. (required)
        :param  : The Amazon Standard Identification Number (ASIN) of the item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_catalog_item_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_catalog_item_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_catalog_item_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_catalog_item  # noqa: E501

        Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog_item_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for the item. (required)
        :param  : The Amazon Standard Identification Number (ASIN) of the item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_catalog_item`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_catalog_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['asin'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/catalog/v0/items/{asin}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_catalog_categories(self, , **kwargs):  # noqa: E501
        """list_catalog_categories  # noqa: E501

        Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_catalog_categories(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for the item. (required)
        :param  : The Amazon Standard Identification Number (ASIN) of the item.
        :param  : Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_catalog_categories_with_http_info(, **kwargs)  # noqa: E501
        else:
            (data) = self.list_catalog_categories_with_http_info(, **kwargs)  # noqa: E501
            return data

    def list_catalog_categories_with_http_info(self, , **kwargs):  # noqa: E501
        """list_catalog_categories  # noqa: E501

        Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_catalog_categories_with_http_info(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for the item. (required)
        :param  : The Amazon Standard Identification Number (ASIN) of the item.
        :param  : Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_catalog_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `list_catalog_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ASIN', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('SellerSKU', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/catalog/v0/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_catalog_items(self, , **kwargs):  # noqa: E501
        """list_catalog_items  # noqa: E501

        Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_catalog_items(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which items are returned. (required)
        :param  : Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.
        :param  : An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
        :param  : Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :param  : A 12-digit bar code used for retail packaging.
        :param  : A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
        :param  : The unique commercial book identifier used to identify books internationally.
        :param  : A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_catalog_items_with_http_info(, **kwargs)  # noqa: E501
        else:
            (data) = self.list_catalog_items_with_http_info(, **kwargs)  # noqa: E501
            return data

    def list_catalog_items_with_http_info(self, , **kwargs):  # noqa: E501
        """list_catalog_items  # noqa: E501

        Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_catalog_items_with_http_info(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which items are returned. (required)
        :param  : Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.
        :param  : An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
        :param  : Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        :param  : A 12-digit bar code used for retail packaging.
        :param  : A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
        :param  : The unique commercial book identifier used to identify books internationally.
        :param  : A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '', '', '', '', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_catalog_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `list_catalog_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('Query', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('QueryContextId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('SellerSKU', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('UPC', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('EAN', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ISBN', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('JAN', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/catalog/v0/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
