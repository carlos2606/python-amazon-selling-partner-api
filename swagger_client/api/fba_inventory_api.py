# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FbaInventoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_inventory_summaries(self, , , , **kwargs):  # noqa: E501
        """get_inventory_summaries  # noqa: E501

        Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 90 | 150 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inventory_summaries(, , , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The granularity type for the inventory aggregation level. (required)
        :param  : The granularity ID for the inventory aggregation level. (required)
        :param  : The marketplace ID for the marketplace for which to return inventory summaries. (required)
        :param  : true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).
        :param  : A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.
        :param  : A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
        :param  : String token returned in the response of your previous request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inventory_summaries_with_http_info(, , , **kwargs)  # noqa: E501
        else:
            (data) = self.get_inventory_summaries_with_http_info(, , , **kwargs)  # noqa: E501
            return data

    def get_inventory_summaries_with_http_info(self, , , , **kwargs):  # noqa: E501
        """get_inventory_summaries  # noqa: E501

        Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 90 | 150 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inventory_summaries_with_http_info(, , , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The granularity type for the inventory aggregation level. (required)
        :param  : The granularity ID for the inventory aggregation level. (required)
        :param  : The marketplace ID for the marketplace for which to return inventory summaries. (required)
        :param  : true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).
        :param  : A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.
        :param  : A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
        :param  : String token returned in the response of your previous request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '', '', '', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inventory_summaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_inventory_summaries`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_inventory_summaries`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_inventory_summaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '' in params:
            query_params.append(('details', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('granularityType', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('granularityId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('startDateTime', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('sellerSkus', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('nextToken', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fba/inventory/v1/summaries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
