# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from amazon_selling_partner_api.api_client import ApiClient


class ServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_appointment_for_service_job_by_service_job_id(self, , **kwargs):  # noqa: E501
        """add_appointment_for_service_job_by_service_job_id  # noqa: E501

        Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_appointment_for_service_job_by_service_job_id(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_appointment_for_service_job_by_service_job_id_with_http_info(, **kwargs)  # noqa: E501
        else:
            (data) = self.add_appointment_for_service_job_by_service_job_id_with_http_info(, **kwargs)  # noqa: E501
            return data

    def add_appointment_for_service_job_by_service_job_id_with_http_info(self, , **kwargs):  # noqa: E501
        """add_appointment_for_service_job_by_service_job_id  # noqa: E501

        Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_appointment_for_service_job_by_service_job_id_with_http_info(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_appointment_for_service_job_by_service_job_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `add_appointment_for_service_job_by_service_job_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['serviceJobId'] = params['']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/v1/serviceJobs/{serviceJobId}/appointments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_service_job_by_service_job_id(self, , , **kwargs):  # noqa: E501
        """cancel_service_job_by_service_job_id  # noqa: E501

        Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_service_job_by_service_job_id(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :param  : A cancel reason code that specifies the reason for cancelling a service job. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_service_job_by_service_job_id_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_service_job_by_service_job_id_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def cancel_service_job_by_service_job_id_with_http_info(self, , , **kwargs):  # noqa: E501
        """cancel_service_job_by_service_job_id  # noqa: E501

        Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_service_job_by_service_job_id_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :param  : A cancel reason code that specifies the reason for cancelling a service job. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_service_job_by_service_job_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `cancel_service_job_by_service_job_id`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `cancel_service_job_by_service_job_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['serviceJobId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('cancellationReasonCode', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/v1/serviceJobs/{serviceJobId}/cancellations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complete_service_job_by_service_job_id(self, , **kwargs):  # noqa: E501
        """complete_service_job_by_service_job_id  # noqa: E501

        Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_service_job_by_service_job_id(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complete_service_job_by_service_job_id_with_http_info(, **kwargs)  # noqa: E501
        else:
            (data) = self.complete_service_job_by_service_job_id_with_http_info(, **kwargs)  # noqa: E501
            return data

    def complete_service_job_by_service_job_id_with_http_info(self, , **kwargs):  # noqa: E501
        """complete_service_job_by_service_job_id  # noqa: E501

        Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_service_job_by_service_job_id_with_http_info(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_service_job_by_service_job_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `complete_service_job_by_service_job_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['serviceJobId'] = params['']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/v1/serviceJobs/{serviceJobId}/completions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_job_by_service_job_id(self, , **kwargs):  # noqa: E501
        """get_service_job_by_service_job_id  # noqa: E501

        Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_job_by_service_job_id(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A service job identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_job_by_service_job_id_with_http_info(, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_job_by_service_job_id_with_http_info(, **kwargs)  # noqa: E501
            return data

    def get_service_job_by_service_job_id_with_http_info(self, , **kwargs):  # noqa: E501
        """get_service_job_by_service_job_id  # noqa: E501

        Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_job_by_service_job_id_with_http_info(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A service job identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_job_by_service_job_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_service_job_by_service_job_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['serviceJobId'] = params['']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/v1/serviceJobs/{serviceJobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_jobs(self, , **kwargs):  # noqa: E501
        """get_service_jobs  # noqa: E501

        Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_jobs(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : Used to select jobs that were placed in the specified marketplaces.  (required)
        :param  : List of service order ids for the query you want to perform.Max values supported 20. 
        :param  : A list of one or more job status by which to filter the list of jobs.
        :param  : String returned in the response of your previous request.
        :param  : A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. 
        :param  : Sort fields on which you want to sort the output.
        :param  : Sort order for the query you want to perform.
        :param  : A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
        :param  : A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format. 
        :param  : A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
        :param  : A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format. 
        :param  : A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
        :param  : A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_jobs_with_http_info(, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_jobs_with_http_info(, **kwargs)  # noqa: E501
            return data

    def get_service_jobs_with_http_info(self, , **kwargs):  # noqa: E501
        """get_service_jobs  # noqa: E501

        Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_jobs_with_http_info(, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : Used to select jobs that were placed in the specified marketplaces.  (required)
        :param  : List of service order ids for the query you want to perform.Max values supported 20. 
        :param  : A list of one or more job status by which to filter the list of jobs.
        :param  : String returned in the response of your previous request.
        :param  : A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. 
        :param  : Sort fields on which you want to sort the output.
        :param  : Sort order for the query you want to perform.
        :param  : A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
        :param  : A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format. 
        :param  : A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
        :param  : A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format. 
        :param  : A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
        :param  : A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '', '', '', '', '', '', '', '', '', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_service_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '' in params:
            query_params.append(('serviceOrderIds', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('serviceJobStatus', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('pageToken', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('pageSize', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('sortField', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('sortOrder', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('createdAfter', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('createdBefore', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('lastUpdatedAfter', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('lastUpdatedBefore', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('scheduleStartDate', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('scheduleEndDate', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/v1/serviceJobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reschedule_appointment_for_service_job_by_service_job_id(self, , , **kwargs):  # noqa: E501
        """reschedule_appointment_for_service_job_by_service_job_id  # noqa: E501

        Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reschedule_appointment_for_service_job_by_service_job_id(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :param  : An existing appointment identifier for the Service Job. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reschedule_appointment_for_service_job_by_service_job_id_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.reschedule_appointment_for_service_job_by_service_job_id_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def reschedule_appointment_for_service_job_by_service_job_id_with_http_info(self, , , **kwargs):  # noqa: E501
        """reschedule_appointment_for_service_job_by_service_job_id  # noqa: E501

        Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reschedule_appointment_for_service_job_by_service_job_id_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon defined service job identifier. (required)
        :param  : An existing appointment identifier for the Service Job. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reschedule_appointment_for_service_job_by_service_job_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `reschedule_appointment_for_service_job_by_service_job_id`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `reschedule_appointment_for_service_job_by_service_job_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['serviceJobId'] = params['']  # noqa: E501
        if '' in params:
            path_params['appointmentId'] = params['']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
