# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from amazon_selling_partner_api.api_client import ApiClient


class SmallAndLightApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_small_and_light_enrollment_by_seller_sku(self, , , **kwargs):  # noqa: E501
        """delete_small_and_light_enrollment_by_seller_sku  # noqa: E501

        Removes the item indicated by the specified seller SKU from the Small and Light program in the specified marketplace. If the item is not eligible for disenrollment, the ineligibility reasons are returned.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_small_and_light_enrollment_by_seller_sku(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace in which to remove the item from the Small and Light program. Note: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_small_and_light_enrollment_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.delete_small_and_light_enrollment_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def delete_small_and_light_enrollment_by_seller_sku_with_http_info(self, , , **kwargs):  # noqa: E501
        """delete_small_and_light_enrollment_by_seller_sku  # noqa: E501

        Removes the item indicated by the specified seller SKU from the Small and Light program in the specified marketplace. If the item is not eligible for disenrollment, the ineligibility reasons are returned.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_small_and_light_enrollment_by_seller_sku_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace in which to remove the item from the Small and Light program. Note: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_small_and_light_enrollment_by_seller_sku" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `delete_small_and_light_enrollment_by_seller_sku`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `delete_small_and_light_enrollment_by_seller_sku`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['sellerSKU'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fba/smallAndLight/v1/enrollments/{sellerSKU}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_small_and_light_eligibility_by_seller_sku(self, , , **kwargs):  # noqa: E501
        """get_small_and_light_eligibility_by_seller_sku  # noqa: E501

        Returns the Small and Light program eligibility status of the item indicated by the specified seller SKU in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_small_and_light_eligibility_by_seller_sku(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace for which the eligibility status is retrieved. NOTE: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_small_and_light_eligibility_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_small_and_light_eligibility_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_small_and_light_eligibility_by_seller_sku_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_small_and_light_eligibility_by_seller_sku  # noqa: E501

        Returns the Small and Light program eligibility status of the item indicated by the specified seller SKU in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_small_and_light_eligibility_by_seller_sku_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace for which the eligibility status is retrieved. NOTE: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_small_and_light_eligibility_by_seller_sku" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_small_and_light_eligibility_by_seller_sku`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_small_and_light_eligibility_by_seller_sku`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['sellerSKU'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fba/smallAndLight/v1/eligibilities/{sellerSKU}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_small_and_light_enrollment_by_seller_sku(self, , , **kwargs):  # noqa: E501
        """get_small_and_light_enrollment_by_seller_sku  # noqa: E501

        Returns the Small and Light enrollment status for the item indicated by the specified seller SKU in the specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_small_and_light_enrollment_by_seller_sku(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace for which the enrollment status is retrieved. Note: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_small_and_light_enrollment_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_small_and_light_enrollment_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_small_and_light_enrollment_by_seller_sku_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_small_and_light_enrollment_by_seller_sku  # noqa: E501

        Returns the Small and Light enrollment status for the item indicated by the specified seller SKU in the specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_small_and_light_enrollment_by_seller_sku_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace for which the enrollment status is retrieved. Note: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_small_and_light_enrollment_by_seller_sku" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_small_and_light_enrollment_by_seller_sku`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_small_and_light_enrollment_by_seller_sku`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['sellerSKU'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fba/smallAndLight/v1/enrollments/{sellerSKU}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_small_and_light_fee_preview(self, **kwargs):  # noqa: E501
        """get_small_and_light_fee_preview  # noqa: E501

        Returns the Small and Light fee estimates for the specified items. You must include a marketplaceId parameter to retrieve the proper fee estimates for items to be sold in that marketplace. The ordering of items in the response will mirror the order of the items in the request. Duplicate ASIN/price combinations are removed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 3 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_small_and_light_fee_preview(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_small_and_light_fee_preview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_small_and_light_fee_preview_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_small_and_light_fee_preview_with_http_info(self, **kwargs):  # noqa: E501
        """get_small_and_light_fee_preview  # noqa: E501

        Returns the Small and Light fee estimates for the specified items. You must include a marketplaceId parameter to retrieve the proper fee estimates for items to be sold in that marketplace. The ordering of items in the response will mirror the order of the items in the request. Duplicate ASIN/price combinations are removed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 3 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_small_and_light_fee_preview_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_small_and_light_fee_preview" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fba/smallAndLight/v1/feePreviews', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_small_and_light_enrollment_by_seller_sku(self, , , **kwargs):  # noqa: E501
        """put_small_and_light_enrollment_by_seller_sku  # noqa: E501

        Enrolls the item indicated by the specified seller SKU in the Small and Light program in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_small_and_light_enrollment_by_seller_sku(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace in which to enroll the item. Note: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_small_and_light_enrollment_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.put_small_and_light_enrollment_by_seller_sku_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def put_small_and_light_enrollment_by_seller_sku_with_http_info(self, , , **kwargs):  # noqa: E501
        """put_small_and_light_enrollment_by_seller_sku  # noqa: E501

        Enrolls the item indicated by the specified seller SKU in the Small and Light program in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_small_and_light_enrollment_by_seller_sku_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : The seller SKU that identifies the item. (required)
        :param  : The marketplace in which to enroll the item. Note: Accepts a single marketplace only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_small_and_light_enrollment_by_seller_sku" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `put_small_and_light_enrollment_by_seller_sku`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `put_small_and_light_enrollment_by_seller_sku`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['sellerSKU'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fba/smallAndLight/v1/enrollments/{sellerSKU}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
