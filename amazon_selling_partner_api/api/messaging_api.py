# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from amazon_selling_partner_api.api_client import ApiClient


class MessagingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def confirm_customization_details(self, , , **kwargs):  # noqa: E501
        """confirm_customization_details  # noqa: E501

        Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.confirm_customization_details(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.confirm_customization_details_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.confirm_customization_details_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def confirm_customization_details_with_http_info(self, , , **kwargs):  # noqa: E501
        """confirm_customization_details  # noqa: E501

        Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.confirm_customization_details_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method confirm_customization_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `confirm_customization_details`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `confirm_customization_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_amazon_motors(self, , , **kwargs):  # noqa: E501
        """create_amazon_motors  # noqa: E501

        Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_amazon_motors(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_amazon_motors_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_amazon_motors_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_amazon_motors_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_amazon_motors  # noqa: E501

        Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_amazon_motors_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_amazon_motors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_amazon_motors`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_amazon_motors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_confirm_delivery_details(self, , , **kwargs):  # noqa: E501
        """create_confirm_delivery_details  # noqa: E501

        Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_confirm_delivery_details(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_confirm_delivery_details_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_confirm_delivery_details_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_confirm_delivery_details_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_confirm_delivery_details  # noqa: E501

        Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_confirm_delivery_details_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_confirm_delivery_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_confirm_delivery_details`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_confirm_delivery_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_confirm_order_details(self, , , **kwargs):  # noqa: E501
        """create_confirm_order_details  # noqa: E501

        Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_confirm_order_details(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_confirm_order_details_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_confirm_order_details_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_confirm_order_details_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_confirm_order_details  # noqa: E501

        Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_confirm_order_details_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_confirm_order_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_confirm_order_details`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_confirm_order_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_confirm_service_details(self, , , **kwargs):  # noqa: E501
        """create_confirm_service_details  # noqa: E501

        Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_confirm_service_details(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_confirm_service_details_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_confirm_service_details_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_confirm_service_details_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_confirm_service_details  # noqa: E501

        Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_confirm_service_details_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_confirm_service_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_confirm_service_details`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_confirm_service_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_digital_access_key(self, , , **kwargs):  # noqa: E501
        """create_digital_access_key  # noqa: E501

        Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_digital_access_key(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_digital_access_key_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_digital_access_key_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_digital_access_key_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_digital_access_key  # noqa: E501

        Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_digital_access_key_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_digital_access_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_digital_access_key`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_digital_access_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_legal_disclosure(self, , , **kwargs):  # noqa: E501
        """create_legal_disclosure  # noqa: E501

        Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_legal_disclosure(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_legal_disclosure_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_legal_disclosure_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_legal_disclosure_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_legal_disclosure  # noqa: E501

        Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_legal_disclosure_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_legal_disclosure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_legal_disclosure`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_legal_disclosure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_negative_feedback_removal(self, , , **kwargs):  # noqa: E501
        """create_negative_feedback_removal  # noqa: E501

        Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_negative_feedback_removal(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_negative_feedback_removal_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_negative_feedback_removal_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_negative_feedback_removal_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_negative_feedback_removal  # noqa: E501

        Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_negative_feedback_removal_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_negative_feedback_removal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_negative_feedback_removal`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_negative_feedback_removal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_unexpected_problem(self, , , **kwargs):  # noqa: E501
        """create_unexpected_problem  # noqa: E501

        Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_unexpected_problem(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_unexpected_problem_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_unexpected_problem_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_unexpected_problem_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_unexpected_problem  # noqa: E501

        Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_unexpected_problem_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_unexpected_problem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_unexpected_problem`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_unexpected_problem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_warranty(self, , , **kwargs):  # noqa: E501
        """create_warranty  # noqa: E501

        Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_warranty(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_warranty_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.create_warranty_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def create_warranty_with_http_info(self, , , **kwargs):  # noqa: E501
        """create_warranty  # noqa: E501

        Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_warranty_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_warranty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_warranty`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `create_warranty`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/messages/warranty', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attributes(self, , , **kwargs):  # noqa: E501
        """get_attributes  # noqa: E501

        Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attributes(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attributes_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_attributes_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_attributes_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_attributes  # noqa: E501

        Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attributes_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which a message is sent. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_attributes`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_messaging_actions_for_order(self, , , **kwargs):  # noqa: E501
        """get_messaging_actions_for_order  # noqa: E501

        Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_messaging_actions_for_order(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which you want a list of available message types. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_messaging_actions_for_order_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_messaging_actions_for_order_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_messaging_actions_for_order_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_messaging_actions_for_order  # noqa: E501

        Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_messaging_actions_for_order_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : An Amazon order identifier. This specifies the order for which you want a list of available message types. (required)
        :param  : A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_messaging_actions_for_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_messaging_actions_for_order`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_messaging_actions_for_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['amazonOrderId'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('marketplaceIds', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messaging/v1/orders/{amazonOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
