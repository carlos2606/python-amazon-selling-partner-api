# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from amazon_selling_partner_api.api_client import ApiClient


class ProductPricingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_competitive_pricing(self, , , **kwargs):  # noqa: E501
        """get_competitive_pricing  # noqa: E501

        Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_competitive_pricing(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku. (required)
        :param  : A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :param  : A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_competitive_pricing_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_competitive_pricing_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_competitive_pricing_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_competitive_pricing  # noqa: E501

        Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_competitive_pricing_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku. (required)
        :param  : A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :param  : A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_competitive_pricing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_competitive_pricing`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_competitive_pricing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('Asins', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('Skus', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ItemType', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/pricing/v0/competitivePrice', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_offers(self, , , , **kwargs):  # noqa: E501
        """get_item_offers  # noqa: E501

        Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_offers(, , , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :param  : The Amazon Standard Identification Number (ASIN) of the item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_offers_with_http_info(, , , **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_offers_with_http_info(, , , **kwargs)  # noqa: E501
            return data

    def get_item_offers_with_http_info(self, , , , **kwargs):  # noqa: E501
        """get_item_offers  # noqa: E501

        Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_offers_with_http_info(, , , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :param  : The Amazon Standard Identification Number (ASIN) of the item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_offers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_item_offers`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_item_offers`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_item_offers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['Asin'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ItemCondition', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/pricing/v0/items/{Asin}/offers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_listing_offers(self, , , , **kwargs):  # noqa: E501
        """get_listing_offers  # noqa: E501

        Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_listing_offers(, , , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :param  : Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_listing_offers_with_http_info(, , , **kwargs)  # noqa: E501
        else:
            (data) = self.get_listing_offers_with_http_info(, , , **kwargs)  # noqa: E501
            return data

    def get_listing_offers_with_http_info(self, , , , **kwargs):  # noqa: E501
        """get_listing_offers  # noqa: E501

        Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_listing_offers_with_http_info(, , , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (required)
        :param  : Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_listing_offers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_listing_offers`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_listing_offers`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_listing_offers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '' in params:
            path_params['SellerSKU'] = params['']  # noqa: E501

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ItemCondition', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/pricing/v0/listings/{SellerSKU}/offers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pricing(self, , , **kwargs):  # noqa: E501
        """get_pricing  # noqa: E501

        Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pricing(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. (required)
        :param  : A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :param  : A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :param  : Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pricing_with_http_info(, , **kwargs)  # noqa: E501
        else:
            (data) = self.get_pricing_with_http_info(, , **kwargs)  # noqa: E501
            return data

    def get_pricing_with_http_info(self, , , **kwargs):  # noqa: E501
        """get_pricing  # noqa: E501

        Returns pricing information for a seller's offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pricing_with_http_info(, , async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param  : A marketplace identifier. Specifies the marketplace for which prices are returned. (required)
        :param  : Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. (required)
        :param  : A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
        :param  : A list of up to twenty seller SKU values used to identify items in the given marketplace.
        :param  : Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['', '', '', '', '']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pricing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_pricing`")  # noqa: E501
        # verify the required parameter '' is set
        if ('' not in params or
                params[''] is None):
            raise ValueError("Missing the required parameter `` when calling `get_pricing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '' in params:
            query_params.append(('MarketplaceId', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('Asins', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('Skus', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ItemType', params['']))  # noqa: E501
        if '' in params:
            query_params.append(('ItemCondition', params['']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/pricing/v0/price', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
